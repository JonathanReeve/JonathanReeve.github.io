#+title: Measuring Canonicity
#+date: 2021-10-25
#+keywords: canonicity
#+tangle: yes

How can we measure how canonical a book is? A good amount of recent research tries to tackle this problem. Several [[https://litlab.stanford.edu/pamphlets/][pamphlets of the Stanford Literary Lab]] deal with operationalizing canonicity: [[https://litlab.stanford.edu/LiteraryLabPamphlet8.pdf][Pamphlet 8, "Between Canon and Corpus"]]; [[https://litlab.stanford.edu/LiteraryLabPamphlet11.pdf][Pamphlet 11, "Canon/Archive,"]] and [[https://litlab.stanford.edu/LiteraryLabPamphlet17.pdf][Pamphlet 17 "Popularity/Prestige"]]. A recent article in ... [[https://www.sciencedirect.com/science/article/pii/S0306457310000087?casa_token=lDqXFpdQRtoAAAAA:SYmQxvk9CuyKMh3NrWIsYvcHhQCx5n-gj30ogrARg6fjf-kL_rF8yA5uLmLPA9iFIszJzTQI][Popular and/or prestigious? measures of scholarly esteem]] complicates the dichotomy. And an [[https://culturalanalytics.org/article/21599-measuring-canonicity-graduate-read-ing-lists-in-departments-of-hispanic-studies][article in the Journal of Cultural Analytics, "Measuring Canonicity,"]] takes a curricular approach, and tracks graduate reading lists in Hispanic Studies departments.

But what if we were to model canonicity using bibliographic metadata? Since this is data made readily available through APIs like that at [[https://openlibrary.org/developers/api][Open Library]], it should be straightforward.

Let's define canonicity $C$ as the ratio between /books authored by the writer/ $B_a$ and /books discussing the writer/ $B_d$:

$$C = \frac{B_a}{B_d}$$

To be fair, we should specify that $B_a$ is not just books or editions, but /works/. That will make sure that we're not over-counting books that have more than one edition. Thankfully, Open Library does make this distinction.

#+BEGIN_COMMENT
Open Library has URLs that look like this:

https://openlibrary.org/subjects/person:john_galsworthy_(1867-1933)

But they only return 25 results.

Books by author:

https://openlibrary.org/search?author=Joyce%2C+James%2C+1882-1941.

Author page:

https://openlibrary.org/authors/OL31827A/James_Joyce

The source file for this blog post is a

#+END_COMMENT

#+BEGIN_SRC python :session session-init
import requests
import json
import pandas as pd
import altair as alt
import time
#+END_SRC

#+RESULTS:

First, look up the author

https://openlibrary.org/search/authors.json?q=james+joyce


#+BEGIN_SRC python :results output :session session-init
def apiCall(url):
    response = requests.get(url)
    parsed = json.loads(response.text)
    return parsed
#+END_SRC

#+RESULTS:

Then, Get the number of works by author:

https://openlibrary.org/search/authors.json?q=OL31827A

#+BEGIN_SRC python :results output :session session-init
def lookupAuthor(name):
    name = name.lower().replace(' ', '+')
    url = f'https://openlibrary.org/search/authors.json?q={name}'
    parsed = apiCall(url)
    # try:
    return parsed['docs'][0]['key']
    # except IndexError:
    #   return

def numWorksByAuthorKey(authorKey):
    url = "https://openlibrary.org/search/authors.json?q=" + authorKey
    parsed = apiCall(url)
    return parsed['docs'][0]['work_count']

def numWorksByAuthor(name):
    return numWorksByAuthorKey(lookupAuthor(name))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session-init
lookupAuthor("James Joyce")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session session_init
# Find subject heading for authorKey
# https://openlibrary.org/search/subjects.json?q=James+Joyce&subject_type=person
def authorSubjectKey(name):
    url = f"https://openlibrary.org/search/subjects.json?q={name}&subject_type=person"
    parsed = apiCall(url)
    try:
        return parsed['docs'][0]['key']
    except:
        return

# https://openlibrary.org/subjects/person:john_galsworthy_(1867-1933)/works.json
def numWorksByAuthorSubjectKey(key):
    url = f"https://openlibrary.org/{key}/works.json"
    response = requests.get(url)
    parsed = json.loads(response.text)
    try:
        return parsed['work_count']
    except:
        return

def numWorksByAuthorSubject(name):
    return numWorksByAuthorSubjectKey(authorSubjectKey(name))

def canonicityRatio(name):
    """ How much is an author discussed, adjusted for how much he/she wrote? """
    ratio = numWorksByAuthorSubject(name) / numWorksByAuthor(name)
    canonicities[name] = ratio # log it
    print(f"{name}: {ratio}")
    return ratio

canonicities = {}
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session-init
authorList = ['Joseph Conrad', 'George Bernard Shaw', 'James Joyce',
              'H. G. Wells', 'Virginia Woolf', 'H.D.', 'Katherine Mansfield',
              'T. S. Eliot', 'Max Beerbohm', 'Arnold Bennett',
              'Henry James', 'D. H. Lawrence', 'Ford Madox Ford', 'E. M. Forster']

for author in authorList:
    print(canonicityRatio(author))
    time.sleep(1)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :results output :session session-init
del canonicities['George Bernard Shaw'] # Doesn't work.
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session-init
canonicityRatio('John Galsworthy')

#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session-init
df = pd.DataFrame()
df['author'], df['canonicity_score'] = canonicities.keys(), canonicities.values()
df = df.sort_values('canonicity_score')
alt.Chart(df).mark_bar().encode(
  alt.X('canonicity_score'),
  alt.Y('author',
    sort=alt.EncodingSortField(field='canonicity_score'))
).save('canonicities.html')
print(df)
#+END_SRC

#+RESULTS:

* Works Cited
